<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- Asegúrate que esta versión de Spring Boot sea compatible con Java 21 y Selenium 4.31 -->
		<!-- Si tienes problemas, podrías probar una versión más reciente de Spring Boot como 3.2.x o 3.3.x -->
		<version>3.3.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.dappstp</groupId>
	<artifactId>dappstp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>dappstp</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
<properties>
       <java.version>21</java.version>
        <!-- Explicitar clase principal para Spring Boot repackage -->
      <!--   <start-class>com.dappstp.dappstp.DappstpApplication</start-class>-->
  <sonar.organization>matiascionci</sonar.organization>
  <!-- Asegúrate que el projectKey (por defecto groupId:artifactId) coincida con el de SonarCloud -->
  <!-- <sonar.projectKey>com.dappstp:dappstp</sonar.projectKey> -->
  <sonar.host.url>https://sonarcloud.io</sonar.host.url>
</properties>
	<dependencies>
	    <dependency>
        <groupId>org.json</groupId>
        <artifactId>json</artifactId>
        <version>20230227</version>
    </dependency>

    <!-- Jackson (Spring Boot lo incluye, pero por si acaso) -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		  <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-registry-prometheus</artifactId>
        <!-- La versión es gestionada por Spring Boot Bill of Materials (BOM) -->
    </dependency>
		<dependency>
    		<groupId>com.h2database</groupId>
    		<artifactId>h2</artifactId>
    		<scope>runtime</scope>
		</dependency>
	

		<!-- Spring Data JPA (solo una vez es necesario) -->
		<dependency>
   			 <groupId>org.springframework.boot</groupId>
    		 <artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
   			 <groupId>org.springframework.boot</groupId>
   			 <artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
</dependency>
<!-- Para serializar/deserializar tipos de Java Time API (LocalDate, etc.) -->
<dependency>
    <groupId>com.fasterxml.jackson.datatype</groupId>
    <artifactId>jackson-datatype-jsr310</artifactId>
</dependency>
<!-- MUY IMPORTANTE para entidades JPA con Hibernate 5+ y Jakarta EE -->
<!-- Si usas Hibernate 6, sería jackson-datatype-hibernate6 -->
<!-- Si usas javax.persistence (Hibernate 5 con Java EE), sería jackson-datatype-hibernate5 -->
<dependency>
    <groupId>com.fasterxml.jackson.datatype</groupId>
    <artifactId>jackson-datatype-hibernate5-jakarta</artifactId>
</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
  			<groupId>org.springframework.boot</groupId>
  				<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
  				<groupId>org.springframework.boot</groupId>
  				<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- PostgreSQL (solo una vez es necesario) -->
		<dependency>
    		<groupId>org.postgresql</groupId>
    		<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		        
 <dependency>
    <groupId>com.tngtech.archunit</groupId>
    <artifactId>archunit-junit5-engine</artifactId>
    <version>1.3.0</version> <!-- Mantén la misma versión que archunit-junit5-api -->
    <scope>test</scope>
</dependency>
	<dependency>
	  <groupId>com.tngtech.archunit</groupId>
	  <artifactId>archunit-junit5-api</artifactId>
	  <version>1.3.0</version> <!-- O la versión más reciente que estés usando -->
	  <scope>test</scope>
	</dependency>
  
	<!-- JUnit 5 (Jupiter) para pruebas unitarias -->
		 <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.10.2</version> <!-- O la versión más reciente que estés usando -->
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.10.2</version> <!-- O la versión más reciente que estés usando -->
      <scope>test</scope>
    </dependency>
  
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>5.10.2</version>
      <scope>test</scope>
    </dependency>
		

		<!-- Dependencias de Scraping (Jsoup, Selenium) -->
		<!-- Estas parecen ser de Scala (zio, tarantula), ¿las usas realmente con Java/Selenium? -->
		<!-- Si no las usas, considera eliminarlas -->
		 <dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.4.1</version>
  </dependency>

		<dependency>
     		<groupId>dev.doamaral</groupId>
     		<artifactId>zio-selenium_2.13</artifactId>
     		<version>1.0.1</version>
   		</dependency>
		<dependency>
  <groupId>org.apache.httpcomponents.client5</groupId>
  <artifactId>httpclient5-fluent</artifactId>
  <version>5.4.3</version>
</dependency>

<!-- Jsoup para parseo HTML -->
<dependency>
  <groupId>org.jsoup</groupId>
  <artifactId>jsoup</artifactId>
  <version>1.15.4</version>
</dependency>


<!-- Jsoup para parseo HTML -->


		<dependency>
     		<groupId>com.propensive</groupId>
     		<artifactId>tarantula-core</artifactId>
     		<version>0.3.0</version>
   		</dependency>

		 <!-- Selenium Core -->
	
		<dependency>
  <groupId>org.seleniumhq.selenium</groupId>
  <artifactId>selenium-java</artifactId>
  <version>4.32.0</version>
</dependency>
		<!-- Selenium DevTools para la versión v135 (ya presente) -->
	<dependency>
  <groupId>org.seleniumhq.selenium</groupId>
  <artifactId>selenium-devtools-v136</artifactId>
  <version>4.32.0</version>
</dependency>

		  <!-- Spring Security -->
  		<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-security</artifactId>
  		</dependency>

  		<!-- JWT (io.jsonwebtoken) -->
  		<dependency>
    		<groupId>io.jsonwebtoken</groupId>
    		<artifactId>jjwt-api</artifactId>
    		<version>0.11.5</version> <!-- Considera actualizar a 0.12.x si es compatible -->
  		</dependency>
  		<dependency>
    		<groupId>io.jsonwebtoken</groupId>
    		<artifactId>jjwt-impl</artifactId>
   	 		<version>0.11.5</version>
    		<scope>runtime</scope>
  		</dependency>
  		<dependency>
    		<groupId>io.jsonwebtoken</groupId>
    		<artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if you're using Gson -->
    		<version>0.11.5</version>
    		<scope>runtime</scope>
  		</dependency>

	  	<!-- Swagger / OpenAPI -->
		<!-- No necesitas swagger-annotations si usas springdoc -->
		<dependency>
    		<groupId>org.springdoc</groupId>
    		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    		<version>2.5.0</version> <!-- O la versión estable más reciente -->
		</dependency>
		
  		<!-- Spring Security Crypto (ya incluido transitivamente por spring-boot-starter-security) -->
  		<!-- Puedes eliminar esta dependencia explícita si quieres -->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- La configuración de annotationProcessorPaths para Lombok suele heredarla bien -->
				<!-- de spring-boot-starter-parent, pero dejarla explícita no hace daño -->
				<configuration>
				<parameters>true</parameters>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<!-- Opcional: Especificar versión de Lombok si no la hereda bien -->
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			 <!-- El plugin JaCoCo se moverá a un perfil específico -->
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>coverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.8.11</version> <!-- O la versión que prefieras, ej: 0.8.7 como en la sugerencia inicial -->
						<executions>
							<execution>
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>verify</phase> <!-- Generar el reporte en la fase verify -->
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<formats>
										<format>XML</format> <!-- SonarQube necesita el formato XML -->
									</formats>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>