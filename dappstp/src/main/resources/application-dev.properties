spring.datasource.url=jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:dappstp}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASS:postgres}

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create

# JWT config
app.security.jwt.secret-key=x22pvbN9IaDGCiYcxfeAEZ+VaJGtSq08fT11useZDcQUwXpWnRAU1ii0AQTeU5b0lyN+fAXxENsBCrS2KCuYlQ==
app.security.expiration-time=86400000

logging.level.org.springframework.web=DEBUG
spring.security.debug=true


gemini.api.key=AIzaSyC8uBNueI_XTr5-kE4tVQhdUaAr2d_B3Nk
# Spring Config
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
FOOTBALL_API_KEY=b8938d9693774b1c8c7e37fb9422ae02
FOOTBALL_API_URL=https://api.football-data.org/v4

management.endpoints.web.exposure.include=prometheus,health,info

# Habilitar el endpoint de Prometheus (generalmente es true por defecto si micrometer-registry-prometheus está en el classpath)
management.endpoint.prometheus.enabled=true

spring.cache.type=redis
spring.data.redis.host=localhost 
spring.data.redis.port=6379
# spring.redis.password=tu_contraseña # Si tu Redis tiene contraseña

# Opcional: Configurar TTL por defecto para los cachés (en milisegundos)
spring.cache.redis.time-to-live=3600s